printNetwork(network, options) ::= <<
## ############################################################################
## EPFL - Orc2HDL, CAL to HDL code generator 
## Automatically generated ModelSim do file for <network.name> Network
## Generated : <options.currentTime>
## ############################################################################

## Create SystemBuilder Library
vlib SystemBuilder

## Compile the SystemBuilder Library from sources
vcom -reportprogress 300 -work SystemBuilder ../lib/systemBuilder/sbtypes.vhdl
vcom -reportprogress 300 -work SystemBuilder ../lib/systemBuilder/sbfifo.vhdl
vcom -reportprogress 300 -work SystemBuilder ../lib/systemBuilder/sbfifo_behavioral.vhdl

## Map the SystemBuilder Library
vmap SystemBuilder SystemBuilder

## Create SystemBuilder Library
#vlib SystemActors

## Compile the SystemActors Library from sources
#vcom -reportprogress 300 -work SystemActors ../lib/systemActors/types/sa_types.vhd
#vcom -reportprogress 300 -work SystemActors ../lib/systemActors/io/Source.vhd


## Map the SystemActors Library
#vmap SystemActors SystemActors

## Create the work Library
vlib work

## Compile the glbl constans given by Xilinx 
vlog glbl.v

## Compile all the generated Verilog files by OpenForge
vlog ../<if(options.goDoneSignal)>srcGoDone<else>src<endif>/*.v

## Compile the Top VHDL Network
vcom -93 -check_synthesis -quiet -work work ../<if(options.goDoneSignal)>srcGoDone<else>src<endif>/<network.simpleName>.vhd
<if(options.modelsimAnalysis)>
vcom -93 -check_synthesis -quiet -work work ../srcGoDone/tb_<network.simpleName>.vhd
<endif>
## Start simulating the Top
vsim -L unisims_ver -L simprims_ver -t ns work.glbl work.<if(options.modelsimAnalysis)>tb_<endif><network.simpleName>

## Change radix to decimal
radix -decimal

## Add clock(s) and reset signal
<printClocks(network)> 
add wave sim:/<if(options.modelsimAnalysis)>tb_<endif><network.simpleName>/RESET
## Action(s) Go & Done Output Ports
<printNetworkOutputPorts(network)>
<network.instances: printInstanceInputBuffer(); separator="\n">
<if(options.modelsimAnalysis)>
run <options.simTime>ns
quit -force
<endif>
>>

printNetworkOutputPorts(network) ::=<<
<if(network.outputs)>
## Add Network Ouput signals
<network.outputs: printOutputPorts(); separator="\n">
<endif>
<if(options.modelsimAnalysis)>
## Action(s) Go & Done Output Ports
<network.instances: goDoneOutputPorts(); separator="\n">
<endif>
>>

goDoneOutputPorts(instance) ::= <<
<instance.actor.actions: {action | add wave sim:/<if(options.modelsimAnalysis)>tb_<endif><network.simpleName>/<instance.simpleName>_<action.name>_go}; separator="\n">
<instance.actor.actions: {action | add wave sim:/<if(options.modelsimAnalysis)>tb_<endif><network.simpleName>/<instance.simpleName>_<action.name>_done}; separator="\n">
>>

printInstanceInputBuffer(instance) ::=<<
<instance.actor.inputs: printInputQueues(); separator="\n">
>>

printInputQueues(port) ::=<<
add wave sim:/<network.simpleName>/q_ai_<instance.simpleName>_<port.name>/fifo/msync_full 
>>

printOutputPorts(port) ::=<<
add wave sim:/<if(options.modelsimAnalysis)>tb_<endif><network.simpleName>/<port.name>_DATA 
<if (!port.native)>
add wave sim:/<if(options.modelsimAnalysis)>tb_<endif><network.simpleName>/<port.name>_SEND 
add wave sim:/<if(options.modelsimAnalysis)>tb_<endif><network.simpleName>/<port.name>_ACK
<if(!options.modelsimAnalysis)>
force -freeze sim:/<if(options.modelsimAnalysis)>tb_<endif><network.simpleName>/<port.name>_ACK 1 0
<endif>
add wave sim:/<if(options.modelsimAnalysis)>tb_<endif><network.simpleName>/<port.name>_RDY
<if(!options.modelsimAnalysis)>
force -freeze sim:/<if(options.modelsimAnalysis)>tb_<endif><network.simpleName>/<port.name>_RDY 1 0
<endif>
<endif>
>>

printClocks(network) ::=<<
<network.templateData.clockDomainsIndex.keys: {key | add wave sim:/<if(options.modelsimAnalysis)>tb_<endif><network.simpleName>/<key>}; separator="\n">
>>


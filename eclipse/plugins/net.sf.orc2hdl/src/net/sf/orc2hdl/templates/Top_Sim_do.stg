printNetwork(network, options) ::= <<
## ############################################################################
## EPFL - Orc2HDL, CAL to HDL code generator 
## Automatically generated ModelSim do file for <network.name> Network
## Generated : <options.currentTime>
## ############################################################################

## Create SystemBuilder Library
vlib SystemBuilder

## Compile the SystemBuilder Library from sources
vcom -reportprogress 300 -work SystemBuilder ../lib/systemBuilder/vhdl/sbtypes.vhdl
vcom -reportprogress 300 -work SystemBuilder ../lib/systemBuilder/vhdl/sbfifo.vhdl
vcom -reportprogress 300 -work SystemBuilder ../lib/systemBuilder/vhdl/sbfifo_behavioral.vhdl

## Map the SystemBuilder Library
vmap SystemBuilder SystemBuilder

## Create SystemBuilder Library
#vlib SystemActors

## Compile the SystemActors Library from sources
#vcom -reportprogress 300 -work SystemActors ../lib/systemActors/types/sa_types.vhd
#vcom -reportprogress 300 -work SystemActors ../lib/systemActors/io/Source.vhd


## Map the SystemActors Library
#vmap SystemActors SystemActors

## Create the work Library
vlib work

## Compile the glbl constans given by Xilinx 
vlog ../lib/simulation/glbl.v

## Compile all the generated Verilog files by OpenForge
vlog ../<if(options.generateGoDone)>rtl/rtlGoDone<else>rtl<endif>/*.v

## Compile the Top VHDL Network
vcom -93 -check_synthesis -quiet -work work ../<if(options.generateGoDone)>rtl/rtlGoDone<else>rtl<endif>/<network.simpleName>.vhd
<if(options.modelsimAnalysis)>
vcom -93 -check_synthesis -quiet -work work ../rtl/rtlGoDone/tb_<network.simpleName>.vhd
<endif>
## Start simulating the Top
vsim -L unisims_ver -L simprims_ver -t ns work.glbl work.<if(options.modelsimAnalysis)>tb_<endif><network.simpleName>

## Change radix to decimal
radix -decimal

## Add clock(s) and reset signal
<printClocks(network)> 
add wave sim:/<if(options.modelsimAnalysis)>tb_<endif><network.simpleName>/RESET

## Add instance IO signals
<network.instances: printInstanceIO(); separator="\n">
<printNetworkOutputPorts(network)>

## FIFO FULL
add wave -noupdate -divider -height 20 "FIFO FULL"
<network.instances: printInstanceInputBuffer(); separator="\n">
<if(options.modelsimAnalysis)>
run <options.simTime>ns

<else>
<if(!network.inputs)>
force -freeze sim:/<network.simpleName>/CLK 1 0, 0 {50 ns} -r 100
force -freeze sim:/<network.simpleName>/RESET 1 0
run 500ns
force -freeze sim:/<network.simpleName>/RESET 0 0
run 100000ns
wave zoom full
<endif>
<endif>
>>

printNetworkOutputPorts(network) ::=<<
<if(network.outputs)>
## Add Network Ouput signals
<network.outputs: printOutputPorts(); separator="\n">
<endif>
<if(options.generateGoDone)>
## Action(s) Go & Done Output Ports
<network.instances: goDoneOutputPorts(); separator="\n">
<endif>
>>

goDoneOutputPorts(instance) ::= <<
<instance.actor.actions: printGoDone(); separator="\n">
>>

printGoDone(action) ::= <<
add wave sim:/<if(options.modelsimAnalysis)>tb_<endif><network.simpleName>/<instance.simpleName>_<action.name>_go
add wave sim:/<if(options.modelsimAnalysis)>tb_<endif><network.simpleName>/<instance.simpleName>_<action.name>_done
>>

printInstanceInputBuffer(instance) ::=<<
<instance.actor.inputs: printInputQueues(); separator="\n">
>>

printInstanceIO(instance) ::=<<
add wave -noupdate -divider -height 20 i_<instance.simpleName>
<instance.actor.inputs: printActorInput(); separator="\n">
<instance.actor.outputs: printActorOutput(); separator="\n">
>>

printActorInput(port) ::=<<
add wave sim:/<if(options.modelsimAnalysis)>tb_<network.simpleName>/n_<endif><network.simpleName>/i_<instance.simpleName>/<port.name>_DATA
add wave sim:/<if(options.modelsimAnalysis)>tb_<network.simpleName>/n_<endif><network.simpleName>/i_<instance.simpleName>/<port.name>_ACK  
>>

printActorOutput(port) ::=<<
add wave sim:/<if(options.modelsimAnalysis)>tb_<network.simpleName>/n_<endif><network.simpleName>/i_<instance.simpleName>/<port.name>_DATA
add wave sim:/<if(options.modelsimAnalysis)>tb_<network.simpleName>/n_<endif><network.simpleName>/i_<instance.simpleName>/<port.name>_SEND  
>>


printInputQueues(port) ::=<<
add wave sim:/<if(options.modelsimAnalysis)>tb_<endif><network.simpleName>/<if(options.modelsimAnalysis)>n_<network.simpleName>/<endif>q_ai_<instance.simpleName>_<port.name>/fifo/msync_full 
>>

printOutputPorts(port) ::=<<
add wave -noupdate -divider -height 20 no_<port.name>
add wave sim:/<if(options.modelsimAnalysis)>tb_<endif><network.simpleName>/<port.name>_DATA 
<if (!port.native)>
add wave sim:/<if(options.modelsimAnalysis)>tb_<endif><network.simpleName>/<port.name>_SEND 
add wave sim:/<if(options.modelsimAnalysis)>tb_<endif><network.simpleName>/<port.name>_ACK
<if(!options.modelsimAnalysis)>
force -freeze sim:/<if(options.modelsimAnalysis)>tb_<endif><network.simpleName>/<port.name>_ACK 1 0
<endif>
add wave sim:/<if(options.modelsimAnalysis)>tb_<endif><network.simpleName>/<port.name>_RDY
<if(!options.modelsimAnalysis)>
force -freeze sim:/<if(options.modelsimAnalysis)>tb_<endif><network.simpleName>/<port.name>_RDY 1 0
<endif>
<endif>
>>

printClocks(network) ::=<<
<network.templateData.clockDomainsIndex.keys: {key | add wave sim:/<if(options.modelsimAnalysis)>tb_<endif><network.simpleName>/<key>}; separator="\n">
>>

